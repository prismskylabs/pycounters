.. _getting_started:

=================
Getting started
=================

---------------------
Installing pycounters
---------------------

PyCounters is pure python. All you need is to run easy_install (or pip): ::

    easy_install pycounters


Of course, you can always checkout the code from BitBucket on https://bitbucket.org/bleskes/pycounters

---------------------
Introduction
---------------------

PyCounters is a library to help you collect interesting metrics from production code. The first to do when start using
it is to think about what you actually want to collect.

As an case study for this tutorial, we will use a simple Python-based server (taken from the `python docs
<http://docs.python.org/library/socketserver.html#socketserver-tcpserver-example>`_): ::

    import SocketServer

    class MyTCPHandler(SocketServer.BaseRequestHandler):
        """
        The RequestHandler class for our server.

        It is instantiated once per connection to the server, and must
        override the handle() method to implement communication to the
        client.
        """

        def handle(self):
            # self.request is the TCP socket connected to the client
            self.data = self.request.recv(1024).strip()
            print "%s wrote:" % self.client_address[0]
            print self.data
            # just send back the same data, but upper-cased
            self.request.send(self.data.upper())

    if __name__ == "__main__":
        HOST, PORT = "localhost", 9999

        # Create the server, binding to localhost on port 9999
        server = SocketServer.TCPServer((HOST, PORT), MyTCPHandler)

        # Activate the server; this will keep running until you
        # interrupt the program with Ctrl-C
        server.serve_forever()


----------------------
Step 1 - Adding Events
----------------------

For this basic server, we will add events to report the following metrics:
 * Number of requests per second
 * Average time for handling a request

Both of these metrics are connected to the handle method of the MyTCPHandler class in the example.
The number of requests per second the server serves is exactly the number of time the handle() method is called.
The average time for handling a request is exactly the average execution time of handle()

Both of this metrics are measure by decorating handle() the :ref:`shortcut <shortcuts>` decorators
:meth:`occurrence <pycounters.shortcuts.frequency>` and :meth:`occurrence <pycounters.shortcuts.time>`: ::

    import SocketServer
    from pycounters import shortcuts

    class MyTCPHandler(SocketServer.BaseRequestHandler):
        ...

        @shortcuts.time("requests_time")
        @shortcuts.frequency("requests_frequency")
        def handle(self):
            # self.request is the TCP socket connected to the client
            self.data = self.request.recv(1024).strip()
            print "%s wrote:" % self.client_address[0]
            print self.data
            # just send back the same data, but upper-cased
            self.request.send(self.data.upper())


.. note::
    * Every decorator is given a name ("requests_time" and "requests_frequency"). These names will come back in the report generated by PyCounters. More on this in the next section.

    * The shortcut decorators actually do two things - report events and add counters for them. For now, it's OK but you might want to separate the two. More on this later in the tutorial

------------------------
Step 2 - Reporting
------------------------

Now that the metrics are being collected they need to be reported. This is the job of the :ref:`reporters <reporters>`. In this example,
we'll save a report every 5 minutes to a JSON file at /tmp/server.counters.json (check out the :ref:`reporters` section for other options).
To do so, create an instance of :ref:`JSONFileReporter <pycounters.reports.JSONFileReport>` when the server starts: ::

    import SocketServer
    from pycounters import shortcuts, reporters

    ....

    if __name__ == "__main__":
        HOST, PORT = "localhost", 9999
        JSONFile = "/tmp/server.counters.json"

        reporter = reporters.JSONFileReporter(output_file=JSONFile)

        reporter.start_auto_report()


        # Create the server, binding to localhost on port 9999
        server = SocketServer.TCPServer((HOST, PORT), MyTCPHandler)

        # Activate the server; this will keep running until you
        # interrupt the program with Ctrl-C
        server.serve_forever()

.. note::
    Reporters only report on demand (when their report() function is called). To make them report periodically you must call start_auto_report()

By default auto reports are outputted every 5 minutes (change that by using the seconds parameter of start_auto_report() ). After five minutes
the reporter will save it's report. Here is an example: ::

    {"requests_time": 0.00039249658584594727, "requests_frequency": 0.014266581369872909}


 
------------------------
Step 3 - Counters
------------------------


-------------------------
Step 4 - Complete example
-------------------------


------------------------
Step 5 - Utilities
------------------------

------------------------
Step 6 - Advanced
------------------------

- Multiprocess
